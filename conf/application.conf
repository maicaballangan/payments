# This is the main configuration file for the application.
# ~~~~~
application.name = payments
application.version = v1
api.version = 1.0.0

# Application mode
# ~~~~~
# Set default to dev to enable instant reloading and other development help.
# Otherwise set to prod.
application.mode = dev
%payments-staging.application.mode = prod
%payments-staging2.application.mode = prod
%payments-prod.application.mode = prod

# Secret key
# ~~~~~
# The secret key is used to secure cryptographic functions
# If you deploy your application to several instances be sure to use the same key !
application.secret = $APP_SECRET

# i18n
# ~~~~~
# Define locales used by your application.
# You can then place localized messages in conf/messages.{locale} files
# application.langs=fr,en,ja
application.langs = en,ms
application.timezone = Z
application.country = Malaysia

# Date format
# ~~~~~
date.format = yyyy-MM-dd
# date.format.fr=dd/MM/yyyy

# Server configuration
# ~~~~~
# If you need to change the HTTP port, uncomment this (default is set to 9000)
http.port = 9009
%payments-testing.http.port = 9055
%payments-staging.http.port = 9056
%payments-staging2.http.port = 9057
XForwardedSupport = all
tld = localhost
# Enter you TLD here

#
# By default the server listen for HTTP on the wildcard address.
# You can restrict this.
# http.address=127.0.0.1
http.address = localhost

# Remember cookie
cookie.remember = remember


api.key = api-key
api.key.ttl = 30mn
mac.address = mac-address
keystore.file = /data/keys/keystore.jks
keystore.password = testing123
keystore.alias = 1
api.address = localhost:9009
api.address.scheme = http://
api.address.ws = ws://

#
# Use this if you don't host your Play application at the root of the domain
# you're serving it from. This parameter has no effect when deployed as a
# war, because the path will be handled by the application server.
# http.path=/
http.path = /v1

# Session configuration
# ~~~~~~~~~~~~~~~~~~~~~~
# By default, session will be written to the transient PLAY_SESSION cookie.
# The cookies are not secured by default, only set it to true
# if you're serving your pages through https.
# application.session.cookie=PLAY
application.session.maxAge = 1h
# application.session.secure=false
# application.session.maxAge=30mn
# application.session.sendOnlyIfChanged=true
# application.session.httpOnly=true
cookies.enabled = true
externalip.host = http://checkip.amazonaws.com
externalip.header = X-Real-IP
externaldns.ip = 8.8.8.8
externaldns.port = 10002
externalip.default = 111.221.53.196

# Notification
notification.provider = mock
notification.provider.account.id = mock
notification.provider.account.token = mock
notification.provider.account.number = mock
%payments-staging.notification.provider = mock
%payments-staging2.notification.provider = mock
%payments-prod.notification.provider = mock

# Session/Cookie sharing between subdomain
# ~~~~~~~~~~~~~~~~~~~~~~
# By default a cookie is only valid for a specific domain. By setting
# application.defaultCookieDomain to '.example.com', the cookies
# will be valid for all domains ending with '.example.com', ie:
# foo.example.com and bar.example.com

# JVM configuration
# ~~~~~
# Define which port is used by JPDA when application is in debug mode (default is set to 8000)
jpda.port = 8860
%payments-testing.jpda.port = 8861

#
# Java source level => 1.8, 11, 13 (experimental)
java.source = 11

# Log level
# ~~~~~
# Specify log level for your application.
# If you want a very customized log, create a log4j.properties file in the conf directory

application.log.system.out = off
application.log.path = /log4j.testing.properties
%payments-staging.application.log.path = /log4j.staging.properties
%payments-staging2.application.log.path = /log4j.staging.properties
%payments-prod.application.log.path = /log4j.prod.properties

# Store path for Blob content
attachments.path = data/attachments
backups.path = backups
fixtures.path = data
reports.path = reports

# Geodatabase
geodb.path = data/geodb/
geodb.name = GeoLite2-Country.mmdb

# HTTP Response headers control for static files
# ~~~~~
# Set the default max-age, telling the user's browser how long it should cache the page.
# Default is 3600 (one hour). Set it to 0 to send no-cache.
# This is only read in prod mode, in dev mode the cache is disabled.
# http.cacheControl=3600

# If enabled, Play will generate entity tags automatically and send a 304 when needed.
# Default is true, set it to false to deactivate use of entity tags.
http.useETag = true
http.userAgent = payments
http.exposePlayServer = false

# Custom mime types
# mimetype.xpi=application/x-xpinstall

# WS configuration
# ~~~~~
# Default engine is Async Http Client, uncomment to use
# the JDK's internal implementation
# webservice = urlfetch
# If you need to set proxy params for WS requests
# http.proxyHost = localhost
# http.proxyPort = 3128
# http.proxyUser = jojo
# http.proxyPassword = jojo

# Mail configuration
# ~~~~~
# Default is to use a mock Mailer
mail.smtp = mock
%payments-staging.mail.smtp.host = in-v3.mailjet.com
%payments-staging2.mail.smtp.host = in-v3.mailjet.com
%payments-prod.mail.smtp.host = in-v3.mailjet.com

# JMX configuration
%payments-testing.jmx.port = 5685
%payments-staging.jmx.port = 5686
%payments-staging2.jmx.port = 5687
%test.jmx.port = 5688
%payments-prod.jmx.port = 5689

%payments-testing.jmx.hostname = 192.168.1.7
%payments-staging.jmx.hostname = 192.168.1.7
%payments-staging2.jmx.hostname = 192.168.1.7
%payments-prod.jmx.hostname = 192.168.1.7

# Java agent
#%staging.javaagent.path = /opt/newrelic/newrelic.jar
#%staging2.javaagent.path = /opt/newrelic/newrelic.jar
#%prod.javaagent.path = /opt/newrelic/newrelic.jar
%payments-testing.javaagent.path = bin/glowroot/glowroot.jar
%payments-staging.javaagent.path = bin/glowroot/glowroot.jar
%test.javaagent.path = bin/jacocoagent.jar

# Java agentlib
#takipi.agentlib=TakipiAgent

# Default admin id and password - make sure to change the password!
auth.id = payments
auth.password = payments@@1

payments.id = paymentsapp
payments.password = Paymentsapp@@1

# Gzip
# If enabled, Play will gzip html and json responses.
# This should NOT be enabled if a reverse proxy with gzip compression is being used.
gzip = 1
%payments-testing.gzip = 0
%payments-staging.gzip = 0
%payments-staging2.gzip = 0
%payments-prod.gzip = 0
%test.gzip = 0

# Url-resolving in Jobs
# ~~~~~~
# When rendering templates with reverse-url-resoling (@@{..}) in Jobs (which do not have an inbound Http.Request),
# ie if sending a HtmlMail, Play need to know which url your users use when accessing your app.
application.baseUrl = http://localhost:9009

# Jobs executor
# ~~~~~~
# Size of the Jobs pool
play.jobs.pool = 10

# Execution pool
# ~~~~~
# Default to 1 thread in DEV mode or (nb processors + 1) threads in PROD mode.
# Try to keep a low as possible. 1 thread will serialize all requests (very useful for debugging purpose)
play.pool = 2
%payments-staging.play.pool = 8
%payments-staging2.play.pool = 8
%payments-prod.play.pool = 8

# Netty pipeline configuration (advanced settings)
# You can default netty settings by overriding the following line. Each handler must be comma separated.
# The last value must be the PlayHandler class (or your own that extends PlayHandler)
# Default values are
# play.netty.pipeline = play.server.FlashPolicyHandler,org.jboss.netty.handler.codec.http.HttpRequestDecoder,play.server.StreamChunkAggregator,org.jboss.netty.handler.codec.http.HttpResponseEncoder,org.jboss.netty.handler.stream.ChunkedWriteHandler,play.server.PlayHandler
# For example, to enable Netty response compression
play.netty.pipeline = play.server.FlashPolicyHandler,org.jboss.netty.handler.codec.http.HttpRequestDecoder,play.server.StreamChunkAggregator,org.jboss.netty.handler.codec.http.HttpResponseEncoder,org.jboss.netty.handler.codec.http.HttpContentCompressor,org.jboss.netty.handler.stream.ChunkedWriteHandler,play.server.PlayHandler
# For SSL, use the play.ssl.netty.pipeline property
# play.ssl.netty.pipeline = play.server.FlashPolicyHandler,org.jboss.netty.handler.codec.http.HttpRequestDecoder,play.server.StreamChunkAggregator,org.jboss.netty.handler.codec.http.HttpResponseEncoder,org.jboss.netty.handler.codec.http.HttpContentCompressor,org.jboss.netty.handler.stream.ChunkedWriteHandler,play.server.ssl.SslPlayHandler

# Open file from errors pages
# ~~~~~
# If your text editor supports opening files by URL, Play! will
# dynamically link error pages to files
#
# Example, for textmate:
# play.editor=txmt://open?url=file://%s&line=%s

# Testing. Set up a custom configuration for test mode
# ~~~~~
%test.application.mode = dev
%test.mail.smtp = mock
%test.play.tmp = none

# Cache expire duration
default.expire = 24h
image.expire = 24h
category.expire = 24h

stripe.account.id=$STRIPE_ACCOUNT_ID
stripe.public.key=$STRIPE_PUBLIC_KEY
stripe.secret.key=$STRIPE_SECRET_KEY
stripe.webhook.signing.secret=$STRIPE_SIGNING_KEY

allowed.referers = https://localhost